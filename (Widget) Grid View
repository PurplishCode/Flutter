What is Grid View?

It is a 2-Dimensional array which places its children into rows and column displaying the items in a tabular form.

With the Grid View itself as an individual widget, there are 4 more options along with it which are…

    -> GridView.count
    -> GridView.builder
    -> GridView.custom
    -> GridView.extent

Grid View Widget

The constructor of the GridView is as follows…

GridView(
  scrollDirection: Axis.vertical,           //default
  reverse: false,                           //default
  controller: ScrollController(),
  primary: false,
  physics: ,
  shrinkWrap: true,
  padding: EdgeInsets.all(5.0),  @required
  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
    crossAxisCount: 3,
    mainAxisSpacing: 5.0,
    crossAxisSpacing: 5.0,
  ),        OR
  /* gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(
      maxCrossAxisExtent: 125,
      mainAxisSpacing: 5.0,
      crossAxisSpacing: 5.0),*/  addAutomaticKeepAlives: true,             //default
  addRepaintBoundaries: true,               //default
  addSemanticIndexes: true,                 //default
  semanticChildCount: 0,
  cacheExtent: 0.0,
  dragStartBehavior: DragStartBehavior.start,
  clipBehavior: Clip.hardEdge,
  keyboardDismissBehavior: ScrollViewKeyboardDismissBehavior.manual,      
  children: []                     // List of Widgets

Here's the following properties for Grid View: 

    [1. scrollDirection: Axis.Vertical or Axis.Horizontal. Changes the direction of the scroll either up down or left to right.]
    [2. reverse: false. If it is set to true the whole list will be reversed and scroll position will start the bottom.
    [3. primary: false. It determines whether the primary scroll is associated with the parent or not.
    [4. physics: It is used to determine the scrolling behaviour when a user is scrolling and has reached the start or the end of the list.
    [5. shrinkWrap: false. By default, the value is false. The scrollable list takes as much as space for scrolling in the scroll direction, which may cause a memory leak and reducing the performance of the application. If it is set to true then the scrollable list will be as big as its children widgets allows it to be.
    [6. padding(EdgeInsets): It is used to specify space around the whole list of widgets.
    [7. crossAxisSpacing: To add space between the children on its crossAxis, mainly meaning the horizontal spacing between the widgets.
    [8. mainAxisSpacing: To add space between the children on its mainAxis, mainly meaning the vertical spacing between the widgets.
    [9. gridDelegate: This is a required property for GridView widget. I have already mentioned in the above constructor two widgets that are associated with gridDelegate property. 
    The main difference between the two is: SliverGridDelegateWithFixedCrossAxis has a property crossAxisCount, which takes in a number according to which GridView will draw the number of columns. If it is 2 it will show 2 columns, if it is 4 it will show 4 columns. 
    Now SliverGridDelegateWithMaxCrossAxisExtent has a property maxCrossAxisExtent which takes in double pixels. 
    What it really means is that it divides the available space between the widgets and forms the columns accordingly. 
For example, if the width of the screen is 500 pixels, and maxCrossAxisExtent is set to 150 pixels, each child widget will get a max of 150 pixels or less and so the delegate will draw 4 columns giving each child 125 pixels of space.
